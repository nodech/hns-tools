#!/usr/bin/env node

'use strict';

const {CLI, CLIError} = require('../lib/cli');
const util = require('../lib/util');
const ansi = require('../lib/ansi');

const restoreCursor = () => process.stdout.write(ansi.cursor.show);

process.on('SIGINT', () => {
  restoreCursor();
  process.exit(1);
});
process.on('unhandledRejection', restoreCursor);

(async () => {
  const config = util.getConfigs({
    argv: true,
    env: true
  }, {
    alias: {
      'h': 'help'
    }
  });

  const logger = util.getLogger(config);
  const argv = config.argv;

  if (isHelp(config)) {
    console.error(help());
    process.exit(1);
  }

  const command = argv.shift();
  const cli = new CLI({
    cwd: process.cwd(),
    logger: logger
  });

  cli.init();
  await cli.ensure();

  cli.start();

  switch (command) {
    case 'test': {
      await cli.run('test');
      break;
    }
    default:
      throw new CLIError(`Command "${command}" not found. Check "help".`);
  }

  cli.stop();
})().catch(async (e) => {
  if (e instanceof CLIError) {
    console.error(e.message);
    process.exit(1);
  }

  throw e;
}).catch((e) => {
  console.error(e);
  restoreCursor();
  process.exit(2);
});

function help() {
  return `hs-tools [tool options] command [command options]
Commands:
  help                   - Show this help.


Options:
  -h, --help - show help

Environment:
  HS_PACKAGES_LOG   - debug level: spam, debug, info, warning, error, none

Examples:

`;
}

function isHelp(config) {
  if (config.bool('help'))
    return true;

  if (config.argv.length === 0)
    return true;

  if (config.argv[0] === 'help')
    return true;

  return false;
}
