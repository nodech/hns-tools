#!/usr/bin/env node

'use strict';

const {CLI, CLIError} = require('../lib/cli');
const util = require('../lib/utils/util');
const ansi = require('../lib/utils/ansi');

const restoreCursor = () => {
  if (process.stdout.isTTY)
    process.stdout.write(ansi.cursor.show);

  if (process.stderr.isTTY)
    process.stderr.write(ansi.cursor.show);
};

process.on('SIGINT', () => {
  restoreCursor();
  process.exit(1);
});

process.on('unhandledRejection', (err) => {
  restoreCursor();
  console.error(err);
  process.exit(3);
});

process.on('uncaughtException', (err) => {
  console.error(err);
  restoreCursor();
  process.exit(3);
});

(async () => {
  const config = util.getConfigs({
    argv: true,
    env: true
  }, {
    alias: {
      'h': 'help'
    }
  });

  const argv = config.argv;

  if (isHelp(config)) {
    console.error(help());
    process.exit(1);
  }

  const options = {
    cwd: process.cwd()
  };

  const command = argv.shift();
  const cli = new CLI({
    ...options,
    renderer: config.str('ui', null),
    stderr: process.stderr,
    stdout: process.stdout
  });

  cli.init();
  await cli.ensure();

  cli.start();

  switch (command) {
    case 'git': {
      const subcmd = argv.shift();

      switch (subcmd) {
        case 'prlog': {
          break;
        }
        default: {
          throw new Error(
            `Subcommand "${subcmd}" of git not found. Check "help"`);
        }
      }
    }
    case 'example': {
      await cli.run('example');
      break;
    }
    default:
      throw new CLIError(`Command "${command}" not found. Check "help".`);
  }

  cli.stop();
})().catch(async (e) => {
  restoreCursor();

  if (e instanceof CLIError) {
    console.error(e.message);
    process.exit(1);
  }

  throw e;
}).catch((e) => {
  console.error(e);
  process.exit(2);
});

function help() {
  return `hs-tools [tool options] command [command options]
Commands:
  help                   - Show this help.
  git                    - Git related subcommands

Git subcommands:
  prlog                  - Log formatted by PRs

Options:
  -h, --help - show help
  --ui=<type>            - text or loader

Examples:

`;
}

function isHelp(config) {
  if (config.bool('help'))
    return true;

  if (config.argv.length === 0)
    return true;

  if (config.argv[0] === 'help')
    return true;

  return false;
}
